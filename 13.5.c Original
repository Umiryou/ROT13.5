/*
Francis Fermo
UCFID 2768678
COP 3502 Section 2
Assignment 0
ROT 13.5
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    int n, isVowel = 0;
    char word[101];
    const int end = 'z';
    const int range = 26;

    scanf("%d", &n);
    
    for (int i = 0; i < n; i++)
    {
        scanf("%s", word); // Scans how many words to encrypt.
        
        // Scans through char array.
        for (int j =  0; j < strlen(word); j++)
        {
            // Checks if char in position a is vowel. 1 = true, 0 = false. Redundant else statement for clarity.
            if ((word[j] == 'a') || (word[j] == 'e') || (word[j] == 'i') || (word[j] == 'o') || (word[j] == 'u'))
            {
                isVowel = 1;
            }

            else
            {
                isVowel = 0;
            }
            
            if (isVowel == 1)
            {
                for (int k = 0; k < 13; k++)
                {
                    // If char is 'z', subtract 26 and increment by 1, else keep incrementing.
                    if (word[j] == end)
                    {
                        word[j] -= range;
                        word[j]++;
                    }
                    else
                        word[j]++;
                }

                j++; // Go to next character in char array because current char is a vowel.
                for (int k = 0; k < 14; k++)
                {
                    // If char is 'z', subtract 26 and increment by 1, else keep incrementing.
                    if (word[j] == end)
                    {
                        word[j] -= range;
                        word[j]++;
                    }
                    else
                        word[j]++;
                }
            }

            else
            {
                for (int k = 0; k < 13; k++)
                {
                    // If char is 'z', subtract 26 and increment by 1, else keep incrementing.
                    if (word[j] == end)
                    {
                        word[j] -= range;
                        word[j]++;
                    }
                    else
                        word[j]++;
                }
            }
        }
        printf("%s\n", word);
    }
    return 0;
}
